[{"id":"6de188fa06f59d68","type":"tab","label":"Virtual Smart Meter","disabled":false,"info":"","env":[]},{"id":"1c8b4778fe0406bb","type":"group","z":"6de188fa06f59d68","style":{"stroke":"#999999","stroke-opacity":"1","fill":"none","fill-opacity":"1","label":true,"label-position":"nw","color":"#a4a4a4"},"nodes":["functionNodeIncomingID","debugNodeIncomingID","functionNodeOutgoingID","debugNodeOutgoingID","715b85730dd792ac"],"x":254,"y":19,"w":512,"h":162},{"id":"6731da874c0902d6","type":"group","z":"6de188fa06f59d68","style":{"stroke":"#999999","stroke-opacity":"1","fill":"none","fill-opacity":"1","label":true,"label-position":"nw","color":"#a4a4a4"},"nodes":["8ccca98c82e6a12a","0dd8f8d3b86faa1f","de01e347a894fd39","521a36f753ba83c8","04cbb49164d0b5e0","b80863e714188a34"],"x":34,"y":199,"w":812,"h":162},{"id":"068c2309a669990d","type":"group","z":"6de188fa06f59d68","style":{"stroke":"#999999","stroke-opacity":"1","fill":"none","fill-opacity":"1","label":true,"label-position":"nw","color":"#a4a4a4"},"nodes":["bf301e872bfdf340","9af36c97ea9ff59a","d61a05b905592b97","cb341a306d5debee","7a7ea94690a1c002","9057b17d00fd000a","4da2e749649837cd","c88cc4fd13bb1e6d","be4f7a5cb9842b60","4e9321fb2c99a169","94786bf7c4235e68","d6d119ee40724c96","cc9aa50479cdc42a","28a1747bef8d66e1","79a691a032baaa79","8cf65bf653ab7e41","aff283c265364ce3","4752eddc4c6e9be0","25a0ced8a07d2a0b","b26cdee6f050aa60","9a9c88f7e4cf91e6"],"x":34,"y":799,"w":992,"h":342},{"id":"bf301e872bfdf340","type":"inject","z":"6de188fa06f59d68","d":true,"g":"068c2309a669990d","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"1","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":150,"y":1060,"wires":[["aff283c265364ce3"]]},{"id":"9af36c97ea9ff59a","type":"inject","z":"6de188fa06f59d68","d":true,"g":"068c2309a669990d","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"1","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":150,"y":900,"wires":[["d61a05b905592b97"]]},{"id":"d61a05b905592b97","type":"function","z":"6de188fa06f59d68","d":true,"g":"068c2309a669990d","name":"Read","func":"var fc=3;\nvar sa=11;\nvar addresses=1;\n//var slave_ip=msg.payload.slave_ip;\n//msg.slave_ip=\"192.168.1.31\";\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":290,"y":900,"wires":[["cb341a306d5debee","4da2e749649837cd"]]},{"id":"cb341a306d5debee","type":"modbus-flex-getter","z":"6de188fa06f59d68","d":true,"g":"068c2309a669990d","name":"","showStatusActivities":true,"showErrors":true,"showWarnings":true,"logIOActivities":false,"server":"db6f9b3e.e5f338","useIOFile":false,"ioFile":"","useIOForPayload":false,"emptyMsgOnFail":true,"keepMsgProperties":true,"delayOnStart":false,"startDelayTime":"","x":450,"y":900,"wires":[[],["7a7ea94690a1c002"]]},{"id":"7a7ea94690a1c002","type":"function","z":"6de188fa06f59d68","d":true,"g":"068c2309a669990d","name":"Response","func":"const buf = Buffer.from(msg.payload.buffer);\nconst value = buf.readUInt16BE();\nmsg.value = value;\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":660,"y":900,"wires":[["9057b17d00fd000a","c88cc4fd13bb1e6d"]]},{"id":"9057b17d00fd000a","type":"ui_text","z":"6de188fa06f59d68","d":true,"g":"068c2309a669990d","group":"441219833b5d8265","order":0,"width":0,"height":0,"name":"","label":"Meter Type:","format":"{{msg.value}}","layout":"col-center","className":"","style":false,"font":"","fontSize":16,"color":"#000000","x":830,"y":900,"wires":[]},{"id":"4da2e749649837cd","type":"debug","z":"6de188fa06f59d68","d":true,"g":"068c2309a669990d","name":"debug 18","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":460,"y":840,"wires":[]},{"id":"c88cc4fd13bb1e6d","type":"debug","z":"6de188fa06f59d68","d":true,"g":"068c2309a669990d","name":"debug 19","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":820,"y":860,"wires":[]},{"id":"8ccca98c82e6a12a","type":"modbus-write","z":"6de188fa06f59d68","g":"6731da874c0902d6","name":"","showStatusActivities":false,"showErrors":false,"showWarnings":true,"unitid":"1","dataType":"HoldingRegister","adr":"11","quantity":"1","server":"db6f9b3e.e5f338","emptyMsgOnFail":false,"keepMsgProperties":false,"delayOnStart":false,"startDelayTime":"","x":520,"y":280,"wires":[["0dd8f8d3b86faa1f"],["de01e347a894fd39"]]},{"id":"0dd8f8d3b86faa1f","type":"modbus-response","z":"6de188fa06f59d68","g":"6731da874c0902d6","name":"","registerShowMax":20,"x":730,"y":260,"wires":[]},{"id":"de01e347a894fd39","type":"debug","z":"6de188fa06f59d68","g":"6731da874c0902d6","name":"debug 39","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":700,"y":320,"wires":[]},{"id":"521a36f753ba83c8","type":"function","z":"6de188fa06f59d68","g":"6731da874c0902d6","name":"Write","func":"/*// Retrieve the last number from the context, default to 0 if not set\nlet lastNumber = context.get('lastNumber') || 150;\n\n// Increment the number\nlet nextNumber = lastNumber + 1;\n\n// Reset to 1 if the number exceeds 99\nif (nextNumber > 255) {\n    nextNumber = 150;\n}\n\n// Save the next number to context\ncontext.set('lastNumber', nextNumber);\n\n// Set the message payload to the next number\nmsg.payload = nextNumber;\n\n// Return the message\nreturn msg;*/\n\n\nvar fc=6;\nvar sa=11;\nvar addresses=1;\nvar value=71; // asks for 40 and 14 registers, might be 72 but 71 works\n//var value=167; //other version, other info straga states it should be 168\nmsg.payload={\"value\":value , 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":310,"y":280,"wires":[["8ccca98c82e6a12a"]]},{"id":"04cbb49164d0b5e0","type":"inject","z":"6de188fa06f59d68","g":"6731da874c0902d6","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"3","crontab":"","once":true,"onceDelay":"0.2","topic":"","payload":"","payloadType":"date","x":150,"y":280,"wires":[["521a36f753ba83c8"]]},{"id":"be4f7a5cb9842b60","type":"inject","z":"6de188fa06f59d68","d":true,"g":"068c2309a669990d","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"1","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":150,"y":980,"wires":[["4e9321fb2c99a169"]]},{"id":"4e9321fb2c99a169","type":"function","z":"6de188fa06f59d68","d":true,"g":"068c2309a669990d","name":"Read","func":"var fc=3;\nvar sa=14;\nvar addresses=1;\n//var slave_ip=msg.payload.slave_ip;\n//msg.slave_ip=\"192.168.1.31\";\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":290,"y":980,"wires":[["94786bf7c4235e68"]]},{"id":"94786bf7c4235e68","type":"modbus-flex-getter","z":"6de188fa06f59d68","d":true,"g":"068c2309a669990d","name":"","showStatusActivities":true,"showErrors":true,"showWarnings":true,"logIOActivities":false,"server":"db6f9b3e.e5f338","useIOFile":false,"ioFile":"","useIOForPayload":false,"emptyMsgOnFail":true,"keepMsgProperties":true,"delayOnStart":false,"startDelayTime":"","x":450,"y":980,"wires":[[],["d6d119ee40724c96"]]},{"id":"d6d119ee40724c96","type":"function","z":"6de188fa06f59d68","d":true,"g":"068c2309a669990d","name":"Response","func":"//const buf = Buffer.from(msg.payload.buffer);\n//const value = buf.readInt32BE();\n//msg.value = value;\n//return msg;\n\nconst buf = Buffer.from(msg.payload.buffer);\nconst value = buf.readUInt16LE();\nmsg.value = value;\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":660,"y":980,"wires":[["cc9aa50479cdc42a","28a1747bef8d66e1"]]},{"id":"cc9aa50479cdc42a","type":"ui_text","z":"6de188fa06f59d68","d":true,"g":"068c2309a669990d","group":"441219833b5d8265","order":0,"width":0,"height":0,"name":"","label":"Reg14 Power Consumption:","format":"{{msg.value}}","layout":"col-center","className":"","style":false,"font":"","fontSize":16,"color":"#000000","x":880,"y":980,"wires":[]},{"id":"28a1747bef8d66e1","type":"debug","z":"6de188fa06f59d68","d":true,"g":"068c2309a669990d","name":"debug 48","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":820,"y":940,"wires":[]},{"id":"79a691a032baaa79","type":"debug","z":"6de188fa06f59d68","d":true,"g":"068c2309a669990d","name":"debug 49","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":820,"y":1060,"wires":[]},{"id":"8cf65bf653ab7e41","type":"function","z":"6de188fa06f59d68","d":true,"g":"068c2309a669990d","name":"Response","func":"const buf = Buffer.from(msg.payload.buffer);\nconst value = buf.readInt32LE();\nmsg.value = value;\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":660,"y":1060,"wires":[["79a691a032baaa79","25a0ced8a07d2a0b","b26cdee6f050aa60"]]},{"id":"aff283c265364ce3","type":"function","z":"6de188fa06f59d68","d":true,"g":"068c2309a669990d","name":"Read","func":"var fc=3;\nvar sa=40;\nvar addresses=2;\n//var slave_ip=msg.payload.slave_ip;\n//msg.slave_ip=\"192.168.1.31\";\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":290,"y":1060,"wires":[["4752eddc4c6e9be0"]]},{"id":"4752eddc4c6e9be0","type":"modbus-flex-getter","z":"6de188fa06f59d68","d":true,"g":"068c2309a669990d","name":"","showStatusActivities":true,"showErrors":true,"showWarnings":true,"logIOActivities":false,"server":"db6f9b3e.e5f338","useIOFile":false,"ioFile":"","useIOForPayload":false,"emptyMsgOnFail":false,"keepMsgProperties":false,"delayOnStart":false,"startDelayTime":"","x":450,"y":1060,"wires":[[],["8cf65bf653ab7e41"]]},{"id":"25a0ced8a07d2a0b","type":"debug","z":"6de188fa06f59d68","d":true,"g":"068c2309a669990d","name":"debug 50","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"value","targetType":"msg","statusVal":"","statusType":"auto","x":820,"y":1100,"wires":[]},{"id":"b26cdee6f050aa60","type":"ui_text","z":"6de188fa06f59d68","d":true,"g":"068c2309a669990d","group":"441219833b5d8265","order":0,"width":0,"height":0,"name":"","label":"Reg 40 Export:","format":"{{msg.value}}","layout":"col-center","className":"","style":false,"font":"","fontSize":16,"color":"#000000","x":840,"y":1020,"wires":[]},{"id":"512c91308c5229a8","type":"poll-state","z":"6de188fa06f59d68","name":"","server":"ae9d42c5.ea7cf","version":3,"exposeAsEntityConfig":"","updateInterval":"2","updateIntervalType":"num","updateIntervalUnits":"seconds","outputInitially":true,"outputOnChanged":false,"entityId":"sensor.power_consumption","stateType":"num","ifState":"","ifStateType":"str","ifStateOperator":"is","outputs":1,"outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"entityState"},{"property":"data","propertyType":"msg","value":"","valueType":"entity"},{"property":"topic","propertyType":"msg","value":"","valueType":"triggerId"},{"property":"pwrconsump","propertyType":"global","value":"","valueType":"entityState"}],"x":190,"y":440,"wires":[["c62e6b5400995a2d"]]},{"id":"c62e6b5400995a2d","type":"function","z":"6de188fa06f59d68","name":"function 4","func":"// Access the array from msg.payload\nlet value = msg.payload;\n\nmsg.payload = Math.floor(value);\n    \n// Return the message\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":440,"y":440,"wires":[["25d37b0b98478350"]]},{"id":"25d37b0b98478350","type":"function","z":"6de188fa06f59d68","name":"Write","func":"//var fc=16;\n//var sa=14\n//var addresses=2;\n//var buf=Buffer.alloc(4);//create buffer\n//buf.writeInt32BE(Math.floor(msg.payload));\n\n//var values=[(buf[0]*256+buf[1]),(buf[2]*256)+buf[3]]\n//\n//msg.payload={\"value\":values , 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\n//return msg;\n\nvar fc=6;\nvar sa=14;\nvar addresses=1;\nvar value=msg.payload;\n//msg.slave_ip=\"127.0.0.1\";\nmsg.payload={\"value\":value , 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":590,"y":440,"wires":[["a60090b7ec028962"]]},{"id":"a60090b7ec028962","type":"modbus-flex-write","z":"6de188fa06f59d68","name":"Write Reg 14","showStatusActivities":true,"showErrors":true,"showWarnings":true,"server":"db6f9b3e.e5f338","emptyMsgOnFail":true,"keepMsgProperties":true,"delayOnStart":false,"startDelayTime":"","x":750,"y":440,"wires":[["d6524d581b56387a"],[]]},{"id":"1d13aea4148ddc0d","type":"poll-state","z":"6de188fa06f59d68","name":"","server":"ae9d42c5.ea7cf","version":3,"exposeAsEntityConfig":"","updateInterval":"1","updateIntervalType":"num","updateIntervalUnits":"seconds","outputInitially":true,"outputOnChanged":false,"entityId":"sensor.import_export_total","stateType":"num","ifState":"","ifStateType":"str","ifStateOperator":"is","outputs":1,"outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"entityState"},{"property":"data","propertyType":"msg","value":"","valueType":"entity"},{"property":"topic","propertyType":"msg","value":"","valueType":"triggerId"},{"property":"expimptotal","propertyType":"global","value":"","valueType":"entityState"}],"x":180,"y":540,"wires":[["c6c52b07f3a218b5"]]},{"id":"6ef39393b6a5ee39","type":"debug","z":"6de188fa06f59d68","d":true,"name":"debug 51","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":1920,"y":780,"wires":[]},{"id":"6cebd90cec2ad699","type":"function","z":"6de188fa06f59d68","d":true,"name":"function 6","func":"// Access the array from msg.payload\nvar value1 = flow.get(\"$parent.expimptotal\");\nvar value2 = flow.get(\"$parent.pwrconsump\");\nvar value3 = flow.get(\"$parent.solaxmeasuredpower\");\n\nmsg.payload = Math.floor(value3 + value1);\n    \n// Return the message\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1680,"y":780,"wires":[["6ef39393b6a5ee39"]]},{"id":"5842107a5c334c75","type":"poll-state","z":"6de188fa06f59d68","d":true,"name":"","server":"ae9d42c5.ea7cf","version":3,"exposeAsEntityConfig":"","updateInterval":"2","updateIntervalType":"num","updateIntervalUnits":"seconds","outputInitially":true,"outputOnChanged":false,"entityId":"sensor.solax_x3_mic_g2_measured_power","stateType":"num","ifState":"","ifStateType":"str","ifStateOperator":"is","outputs":1,"outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"entityState"},{"property":"data","propertyType":"msg","value":"","valueType":"entity"},{"property":"topic","propertyType":"msg","value":"","valueType":"triggerId"},{"property":"solaxmeasuredpower","propertyType":"global","value":"","valueType":"entityState"}],"x":1360,"y":780,"wires":[["6cebd90cec2ad699"]]},{"id":"f7c03467556735ab","type":"function","z":"6de188fa06f59d68","d":true,"name":"Fixed No for Reg 40","func":"\nmsg.payload = -15;\n    \n// Return the message\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":2140,"y":780,"wires":[[]]},{"id":"cca070cc75893380","type":"function","z":"6de188fa06f59d68","d":true,"name":"Fixed No for Reg 14","func":"\nmsg.payload = -5;\n    \n// Return the message\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1260,"y":840,"wires":[[]]},{"id":"4473ba48d35e4253","type":"function","z":"6de188fa06f59d68","d":true,"name":"Write Int16 to 14","func":"//var fc=16;\n//var sa=14\n//var addresses=2;\n//var buf=Buffer.alloc(4);//create buffer\n//buf.writeInt32BE(Math.floor(msg.payload));\n\n//var values=[(buf[0]*256+buf[1]),(buf[2]*256)+buf[3]]\n//\n//msg.payload={\"value\":values , 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\n//return msg;\n\n/*var fc=6;\nvar sa=14;\nvar addresses=1;\nvar value=msg.payload;\n//msg.slave_ip=\"127.0.0.1\";\nmsg.payload={\"value\":value , 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;*/\n\n/*// Define the Modbus function code, starting address, and the number of registers\nvar fc = 6; // Function code for writing a single holding register\nvar sa = 14; // Starting address (register address)\nvar addresses = 1; // Number of addresses (registers) to write\nvar value = msg.payload; // The value to write to the register\n\n// Ensure the value is a number and within the int16 range (-32768 to 32767)\nif (typeof value !== 'number' || value < -32768 || value > 32767) {\n    node.error(\"Payload must be a number between -32768 and 32767\", msg);\n    return null;\n}\n\n// Convert the value to a 16-bit signed integer format\nif (value < 0) {\n    value = 0xFFFF + value + 1;\n}\n\n// Prepare the Modbus write request payload\nmsg.payload = {\n    value: [value], // Value to write as an array\n    fc: fc, // Function code\n    unitid: 1, // Modbus unit ID (slave ID)\n    address: sa, // Register address\n    quantity: addresses // Number of registers to write\n};\n\n// Return the message to be processed by the Modbus Write node\nreturn msg;*/\n\nvar fc=6;\nvar sa=14;\nvar addresses=1;\nvar buf = Buffer.alloc(2); // Allocate a buffer of 2 bytes for Int16LE\nvar value = msg.payload; // The value to write to the register\n\n// Ensure the value is within the Int16 range\nif (value < -32768 || value > 32767) {\n    node.error(\"Payload must be a number between -32768 and 32767\", msg);\n    return null;\n}\n\n// Write the value as a signed 16-bit integer (little-endian)\nbuf.writeInt16BE(value, 0);\nvar values = [(buf[0] * 256 + buf[1])]\n\nmsg.payload={\"value\":values , 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1480,"y":840,"wires":[["8f102ab588327d80"]]},{"id":"8f102ab588327d80","type":"modbus-flex-write","z":"6de188fa06f59d68","d":true,"name":"Write Reg 14","showStatusActivities":true,"showErrors":true,"showWarnings":true,"server":"db6f9b3e.e5f338","emptyMsgOnFail":true,"keepMsgProperties":true,"delayOnStart":false,"startDelayTime":"","x":1690,"y":840,"wires":[[],[]]},{"id":"8eb85f4dbe3e4aa0","type":"modbus-flex-server","z":"6de188fa06f59d68","name":"","logEnabled":false,"serverAddress":"192.168.9.11","serverPort":"5050","responseDelay":100,"unitId":1,"delayUnit":"ms","coilsBufferSize":20000,"registersBufferSize":20000,"minAddress":0,"splitAddress":10000,"funcGetCoil":"function getFlexCoil(addr, unitID) {\n\tif (unitID === node.unitId && \n\t\taddr >= node.minAddress && \n\t\taddr <= node.splitAddress) { \n\n\t\treturn node.coils.readUInt8(addr * node.bufferFactor) \n\t}  \n}","funcGetDiscreteInput":"function getFlexDiscreteInput(addr, unitID) {\n\taddr += node.splitAddress\n\tif (unitID === node.unitId && \n\t\taddr >= node.splitAddress && \n\t\taddr <= node.splitAddress * 2) { \n\n\t\treturn node.coils.readUInt8(addr * node.bufferFactor) \n\t}  \n}","funcGetInputRegister":"function getFlexInputRegister(addr, unitID) { \n\tif (unitID === node.unitId && \n\t\taddr >= node.minAddress && \n\t\taddr <= node.splitAddress) { \n\n\t\treturn node.registers.readUInt16BE(addr * node.bufferFactor)  \n\t} \n}","funcGetHoldingRegister":"function getFlexHoldingRegsiter(addr, unitID) { \n\taddr += node.splitAddress\n\tif (unitID === node.unitId && \n\t\taddr >= node.splitAddress && \n\t\taddr <= node.splitAddress * 2) { \n\n\t\treturn node.registers.readUInt16BE(addr * node.bufferFactor)  \n\t} \n}","funcSetCoil":"function setFlexCoil(addr, value, unitID) { \n\tif (unitID === node.unitId && \n\t\taddr >= node.minAddress && \n\t\taddr <= node.splitAddress) { \n\n\t\tnode.coils.writeUInt8(value, addr * node.bufferFactor)  \n\t} \n}","funcSetRegister":"function setFlexRegister(addr, value, unitID) { \n\taddr += node.splitAddress\n\tif (unitID === node.unitId && \n\t\taddr >= node.splitAddress && \n\t\taddr <= node.splitAddress * 2) { \n\n\t\tnode.registers.writeUInt16BE(value, addr * node.bufferFactor)  \n\t} \n}","showErrors":false,"x":140,"y":120,"wires":[["functionNodeIncomingID"],[],[],[],["functionNodeIncomingID"]]},{"id":"functionNodeIncomingID","type":"function","z":"6de188fa06f59d68","g":"1c8b4778fe0406bb","name":"Log Incoming Requests","func":"node.warn(\"Incoming Modbus Request:\", msg.payload);\nreturn msg;","outputs":1,"noerr":0,"x":390,"y":100,"wires":[["debugNodeIncomingID"]]},{"id":"debugNodeIncomingID","type":"debug","z":"6de188fa06f59d68","g":"1c8b4778fe0406bb","name":"Debug Log Incoming","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":620,"y":100,"wires":[]},{"id":"functionNodeOutgoingID","type":"function","z":"6de188fa06f59d68","g":"1c8b4778fe0406bb","name":"Log Outgoing Responses","func":"node.warn(\"Outgoing Modbus Response:\", msg.payload);\nreturn msg;","outputs":1,"noerr":0,"x":390,"y":140,"wires":[["debugNodeOutgoingID"]]},{"id":"debugNodeOutgoingID","type":"debug","z":"6de188fa06f59d68","g":"1c8b4778fe0406bb","name":"Debug Log Outgoing","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":620,"y":140,"wires":[]},{"id":"58ff29c813871b57","type":"poll-state","z":"6de188fa06f59d68","name":"","server":"ae9d42c5.ea7cf","version":3,"exposeAsEntityConfig":"","updateInterval":"1","updateIntervalType":"num","updateIntervalUnits":"seconds","outputInitially":true,"outputOnChanged":false,"entityId":"sensor.shelly_total_imported_energy","stateType":"num","ifState":"","ifStateType":"str","ifStateOperator":"is","outputs":1,"outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"entityState"},{"property":"data","propertyType":"msg","value":"","valueType":"entity"},{"property":"topic","propertyType":"msg","value":"","valueType":"triggerId"}],"x":220,"y":640,"wires":[["331d6217754be0bd"]]},{"id":"223e1eddd6bb78cd","type":"poll-state","z":"6de188fa06f59d68","name":"","server":"ae9d42c5.ea7cf","version":3,"exposeAsEntityConfig":"","updateInterval":"1","updateIntervalType":"num","updateIntervalUnits":"seconds","outputInitially":true,"outputOnChanged":false,"entityId":"sensor.shelly_total_returned_energy","stateType":"num","ifState":"","ifStateType":"str","ifStateOperator":"is","outputs":1,"outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"entityState"},{"property":"data","propertyType":"msg","value":"","valueType":"entity"},{"property":"topic","propertyType":"msg","value":"","valueType":"triggerId"}],"x":210,"y":740,"wires":[["0ba27583b7f3fd12"]]},{"id":"331d6217754be0bd","type":"function","z":"6de188fa06f59d68","name":"Write","func":"function int32ToBuffer(value) {\n    var mbbuffer = new Uint16Array(2);\n    var dataView = new DataView(mbbuffer.buffer);\n    dataView.setInt32(0, value, true);\n    var uint16Value1 = mbbuffer[0];\n    var uint16Value2 = mbbuffer[1];\n    return [uint16Value1, uint16Value2];\n}\n\nfunction int32InvToBuffer(value) {\n    var mbbuffer = new Uint16Array(2);\n    var dataView = new DataView(mbbuffer.buffer);\n    dataView.setInt32(0, value, true);\n    var uint16Value1 = mbbuffer[1];\n    var uint16Value2 = mbbuffer[0];\n    return [uint16Value1, uint16Value2];\n}\n\nfunction float32ToBuffer(value) {\n    var mbbuffer = new Uint16Array(2);\n    var dataView = new DataView(mbbuffer.buffer);\n    dataView.setFloat32(0, value, true);\n    var uint16Value1 = mbbuffer[0];\n    var uint16Value2 = mbbuffer[1];\n    return [uint16Value1, uint16Value2];\n}\n\nfunction float32InvToBuffer(value) {\n    var mbbuffer = new Uint16Array(2);\n    var dataView = new DataView(mbbuffer.buffer);\n    dataView.setFloat32(0, value, true);\n    var uint16Value1 = mbbuffer[1];\n    var uint16Value2 = mbbuffer[0];\n    return [uint16Value1, uint16Value2];\n}\n\nfunction dataToBuffer(value) {\n    var mbbuffer = new Uint16Array(1);\n    var dataView = new DataView(mbbuffer.buffer);\n    dataView.setUint16(0, value, true);\n    var uint16Value1 = mbbuffer[0];\n    return [uint16Value1];\n}\n\nvar value = (msg.payload-3693.3)*10; //payload * 10 to correspond with Solax expectations, -3693.3 is set to compensate for value measured by the Shelly 3em in the past\nvar mbbuffer = int32ToBuffer(value);\n\nvar modbusfx = {\n    payload: {\n        'value': [\n            mbbuffer[0],\n            mbbuffer[1],\n        ],\n        'fc': 16,\n        'unitid': 1,\n        'address': 62,\n        'quantity': 2\n    }\n}\n\nmsg.payload = modbusfx.payload\nreturn msg\n\n/*var fc=16;\nvar sa=62;\nvar addresses=2;\nvar buf=Buffer.alloc(4);//create buffer\nbuf.writeInt32LE(Math.floor(msg.payload)/10);\n//buf.writeFloatLE(msg.payload) / 100;\n\nvar values=[(buf[0]*256+buf[1]),(buf[2]*256)+buf[3]]\n\nmsg.payload={\"value\":values , 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;*/\n\n/*var fc=6;\nvar sa=14;\nvar addresses=1;\nvar value=msg.payload;\n//msg.slave_ip=\"127.0.0.1\";\nmsg.payload={\"value\":value , 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;*/\n\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":490,"y":640,"wires":[["ab6730ae444e534f"]]},{"id":"ab6730ae444e534f","type":"modbus-flex-write","z":"6de188fa06f59d68","name":"Write Reg 62","showStatusActivities":true,"showErrors":true,"showWarnings":true,"server":"db6f9b3e.e5f338","emptyMsgOnFail":true,"keepMsgProperties":true,"delayOnStart":false,"startDelayTime":"","x":630,"y":640,"wires":[["2c2f4c7b05737dcc"],[]]},{"id":"0ba27583b7f3fd12","type":"function","z":"6de188fa06f59d68","name":"Write","func":"function int32ToBuffer(value) {\n    var mbbuffer = new Uint16Array(2);\n    var dataView = new DataView(mbbuffer.buffer);\n    dataView.setInt32(0, value, true);\n    var uint16Value1 = mbbuffer[0];\n    var uint16Value2 = mbbuffer[1];\n    return [uint16Value1, uint16Value2];\n}\n\nfunction int32InvToBuffer(value) {\n    var mbbuffer = new Uint16Array(2);\n    var dataView = new DataView(mbbuffer.buffer);\n    dataView.setInt32(0, value, true);\n    var uint16Value1 = mbbuffer[1];\n    var uint16Value2 = mbbuffer[0];\n    return [uint16Value1, uint16Value2];\n}\n\nfunction float32ToBuffer(value) {\n    var mbbuffer = new Uint16Array(2);\n    var dataView = new DataView(mbbuffer.buffer);\n    dataView.setFloat32(0, value, true);\n    var uint16Value1 = mbbuffer[0];\n    var uint16Value2 = mbbuffer[1];\n    return [uint16Value1, uint16Value2];\n}\n\nfunction float32InvToBuffer(value) {\n    var mbbuffer = new Uint16Array(2);\n    var dataView = new DataView(mbbuffer.buffer);\n    dataView.setFloat32(0, value, true);\n    var uint16Value1 = mbbuffer[1];\n    var uint16Value2 = mbbuffer[0];\n    return [uint16Value1, uint16Value2];\n}\n\nfunction dataToBuffer(value) {\n    var mbbuffer = new Uint16Array(1);\n    var dataView = new DataView(mbbuffer.buffer);\n    dataView.setUint16(0, value, true);\n    var uint16Value1 = mbbuffer[0];\n    return [uint16Value1];\n}\n\nvar value = (msg.payload - 4336.33) * 10; //payload * 10 to correspond with Solax expectations, -3693.3 is set to compensate for value measured by the Shelly 3em in the past\nvar mbbuffer = int32ToBuffer(value);\n\nvar modbusfx = {\n    payload: {\n        'value': [\n            mbbuffer[0],\n            mbbuffer[1],\n        ],\n        'fc': 16,\n        'unitid': 1,\n        'address': 92,\n        'quantity': 2\n    }\n}\n\nmsg.payload = modbusfx.payload\nreturn msg\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":490,"y":740,"wires":[["3d5263af914ec849"]]},{"id":"3d5263af914ec849","type":"modbus-flex-write","z":"6de188fa06f59d68","name":"Write Reg 92","showStatusActivities":true,"showErrors":true,"showWarnings":true,"server":"db6f9b3e.e5f338","emptyMsgOnFail":true,"keepMsgProperties":true,"delayOnStart":false,"startDelayTime":"","x":630,"y":740,"wires":[["c4b30c342080d64d"],[]]},{"id":"2c2f4c7b05737dcc","type":"modbus-response","z":"6de188fa06f59d68","name":"","registerShowMax":20,"x":850,"y":640,"wires":[]},{"id":"c4b30c342080d64d","type":"modbus-response","z":"6de188fa06f59d68","name":"","registerShowMax":20,"x":850,"y":740,"wires":[]},{"id":"c6c52b07f3a218b5","type":"function","z":"6de188fa06f59d68","name":"Write","func":"function int32ToBuffer(value) {\n    var mbbuffer = new Uint16Array(2);\n    var dataView = new DataView(mbbuffer.buffer);\n    dataView.setInt32(0, value, true);\n    var uint16Value1 = mbbuffer[0];\n    var uint16Value2 = mbbuffer[1];\n    return [uint16Value1, uint16Value2];\n}\n\nfunction int32InvToBuffer(value) {\n    var mbbuffer = new Uint16Array(2);\n    var dataView = new DataView(mbbuffer.buffer);\n    dataView.setInt32(0, value, true);\n    var uint16Value1 = mbbuffer[1];\n    var uint16Value2 = mbbuffer[0];\n    return [uint16Value1, uint16Value2];\n}\n\nfunction float32ToBuffer(value) {\n    var mbbuffer = new Uint16Array(2);\n    var dataView = new DataView(mbbuffer.buffer);\n    dataView.setFloat32(0, value, true);\n    var uint16Value1 = mbbuffer[0];\n    var uint16Value2 = mbbuffer[1];\n    return [uint16Value1, uint16Value2];\n}\n\nfunction float32InvToBuffer(value) {\n    var mbbuffer = new Uint16Array(2);\n    var dataView = new DataView(mbbuffer.buffer);\n    dataView.setFloat32(0, value, true);\n    var uint16Value1 = mbbuffer[1];\n    var uint16Value2 = mbbuffer[0];\n    return [uint16Value1, uint16Value2];\n}\n\nfunction dataToBuffer(value) {\n    var mbbuffer = new Uint16Array(1);\n    var dataView = new DataView(mbbuffer.buffer);\n    dataView.setUint16(0, value, true);\n    var uint16Value1 = mbbuffer[0];\n    return [uint16Value1];\n}\n\nvar value = 10*(msg.payload); // payload * 10 to correspond with Solax expectations\nvar mbbuffer = int32ToBuffer(value);\n\nvar modbusfx = {\n    payload: {\n        'value': [\n            mbbuffer[0],\n            mbbuffer[1],\n        ],\n        'fc': 16,\n        'unitid': 1,\n        'address': 40,\n        'quantity': 2\n    }\n}\n\nmsg.payload = modbusfx.payload\nreturn msg\n\n/*var fc=16;\nvar sa=62;\nvar addresses=2;\nvar buf=Buffer.alloc(4);//create buffer\nbuf.writeInt32LE(Math.floor(msg.payload)/10);\n//buf.writeFloatLE(msg.payload) / 100;\n\nvar values=[(buf[0]*256+buf[1]),(buf[2]*256)+buf[3]]\n\nmsg.payload={\"value\":values , 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;*/\n\n/*var fc=6;\nvar sa=14;\nvar addresses=1;\nvar value=msg.payload;\n//msg.slave_ip=\"127.0.0.1\";\nmsg.payload={\"value\":value , 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;*/\n\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":490,"y":540,"wires":[["97fe8eeda8202044"]]},{"id":"97fe8eeda8202044","type":"modbus-flex-write","z":"6de188fa06f59d68","name":"Write Reg 40","showStatusActivities":true,"showErrors":true,"showWarnings":true,"server":"db6f9b3e.e5f338","emptyMsgOnFail":true,"keepMsgProperties":true,"delayOnStart":false,"startDelayTime":"","x":630,"y":540,"wires":[["de8c0d17f213da44"],[]]},{"id":"de8c0d17f213da44","type":"modbus-response","z":"6de188fa06f59d68","name":"","registerShowMax":20,"x":850,"y":540,"wires":[]},{"id":"d6524d581b56387a","type":"modbus-response","z":"6de188fa06f59d68","name":"","registerShowMax":20,"x":930,"y":440,"wires":[]},{"id":"715b85730dd792ac","type":"comment","z":"6de188fa06f59d68","g":"1c8b4778fe0406bb","name":"This is not necessary","info":"Just trying to capture traffic but it does not work.","x":380,"y":60,"wires":[]},{"id":"b80863e714188a34","type":"comment","z":"6de188fa06f59d68","g":"6731da874c0902d6","name":"Modbus meter type response","info":"","x":180,"y":240,"wires":[]},{"id":"ac3dbbf75dd9b7f7","type":"comment","z":"6de188fa06f59d68","name":"Get current consumption??? No idea what reg14 does.","info":"Get current consumption and write it to register 14, does not seem to influence anything","x":240,"y":400,"wires":[]},{"id":"ba383b101359000c","type":"comment","z":"6de188fa06f59d68","name":"Get import/export","info":"","x":120,"y":500,"wires":[]},{"id":"a3ec51532c1d5d17","type":"comment","z":"6de188fa06f59d68","name":"Get total imported energy","info":"","x":150,"y":600,"wires":[]},{"id":"b45f934299f04de7","type":"comment","z":"6de188fa06f59d68","name":"Get total exported energy","info":"","x":150,"y":700,"wires":[]},{"id":"9a9c88f7e4cf91e6","type":"comment","z":"6de188fa06f59d68","d":true,"g":"068c2309a669990d","name":"Dashboard Experiment","info":"","x":160,"y":840,"wires":[]},{"id":"db6f9b3e.e5f338","type":"modbus-client","name":"Local Modbus Server Use This","clienttype":"tcp","bufferCommands":true,"stateLogEnabled":true,"queueLogEnabled":false,"failureLogEnabled":true,"tcpHost":"192.168.9.11","tcpPort":"5050","tcpType":"DEFAULT","serialPort":"/dev/ttyUSB0","serialType":"RTU-BUFFERD","serialBaudrate":"9600","serialDatabits":"8","serialStopbits":"1","serialParity":"none","serialConnectionDelay":"100","serialAsciiResponseStartDelimiter":"","unit_id":"1","commandDelay":"10","clientTimeout":"1000","reconnectOnTimeout":false,"reconnectTimeout":"2000","parallelUnitIdsAllowed":true,"showErrors":true,"showWarnings":true,"showLogs":true},{"id":"441219833b5d8265","type":"ui_group","name":"Modbus Sim","tab":"91a58fa4.8a8b4","order":1,"disp":true,"width":"6","collapse":false,"className":""},{"id":"ae9d42c5.ea7cf","type":"server","name":"Home Assistant","addon":true},{"id":"91a58fa4.8a8b4","type":"ui_tab","name":"Modbus","icon":"dashboard"}]